<?php
// $Id: og_ui.module,v 1.1.2.7 2010/12/29 08:28:44 amitaibu Exp $

/**
 * @file
 * Group UI.
 *
 * @todo - /BACKPORT/ Note removed functions
 *  - Removed hook_field_formatter_view().
 *  - Removed og_ui_subscribe_link().
 *  - Removed og_ui_form_node_type_form_alter().
 */

/**
 * Implement hook_menu().
 */
function og_ui_menu() {
  $items = array();
  $items['group/%/subscribe'] = array(
    'type' => MENU_CALLBACK,
    'file' => 'og_ui.pages.inc',
    'page callback' => 'og_ui_subscribe',
    'page arguments' => array(1),
    // Function will take care of permissions, as we want to show "you are
    // already a member of the group" to group members, however it is not
    // possible to give authenticated group members the "subscribe" permissions.
    'access callback' => 'user_is_logged_in',

    // We don't add the group name, as it might be private.
    'title' => 'Join group'
  );

  $items['group/%/unsubscribe'] = array(
    'type' => MENU_CALLBACK,
    'file' => 'og_ui.pages.inc',
    'page callback' => 'og_ui_unsubscribe',
    'page arguments' => array(1, 2),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 'unsubscribe'),
    'title' => 'Leave group',
  );

  $items['group/%/invite'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_ui_invite_form', 1),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 'invite'),
    'title' => 'Send invitation',
    'type' => MENU_CALLBACK,
    'file' => 'og_ui.pages.inc',
  );

  $items['group/%/admin/people/add-user'] = array(
    'page callback' => 'drupal_get_form',
    'title' => 'Add members',
    'page arguments' => array('og_ui_add_users', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'og_ui.admin.inc',
    'weight' => 5,
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 'add user'),
  );

  // User listing pages.
  $items['group/%/admin/people'] = array(
    'title arguments' => array('People in group @group', 1),
    'title callback' => 'og_ui_menu_title_callback',
    'description' => 'Find and manage group members.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_ui_user_admin_account', 1),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 'administer group'),
    'weight' => -4,
    'file' => 'og_ui.admin.inc',
  );

  // Permission administration pages.
  $items['group/%/admin/people/roles'] = array(
    'title arguments' => array('Roles for group @group', 1),
    'title callback' => 'og_ui_menu_title_callback',
    'description' => 'List, edit, or add user roles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_ui_user_admin_new_role', 1),
    'access callback' => 'og_user_access',
    'access arguments' => array('administer group', 1),
    'file' => 'og_ui.admin.inc',
    'weight' => -9,
  );

  $items['group/%/admin/people/roles/edit'] = array(
    'title' => 'Edit role',
    'page arguments' => array('og_ui_user_admin_role', NULL, 1),
    'access callback' => 'og_user_access',
    'access arguments' => array('administer group', 1),
    'type' => MENU_CALLBACK,
  );

  $items['group/%/admin/people/permissions'] = array(
    'title arguments' => array('Permissions for group @group', 1),
    'title callback' => 'og_ui_menu_title_callback',
    'description' => 'Determine access to features by selecting permissions for roles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_ui_user_admin_permissions', 1),
    'access callback' => 'og_user_access',
    'access arguments' => array('administer group', 1),
    'file' => 'og_ui.admin.inc',
    'weight' => -8,
  );

  $items['node/%/group'] = array(
    'title' => 'Group',
    'page callback' => 'og_ui_group_admin_overview',
    'page arguments' => array(1),
    'access callback' => 'og_user_access',
    'access arguments' => array('administer group', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'og_ui.admin.inc',
  );

  $items['admin/config/group'] = array(
    'title' => 'Group',
    'description' => 'Administer the suite of Group modules.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer group'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/group/permissions'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_ui_user_admin_global_permissions'),
    'title' => 'Group global permissions',
    'access arguments' => array('administer group'),
    'description' => 'Configure Group global permissions.',
    'file' => 'og_ui.admin.inc',
  );

  $items['admin/config/group/fields'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_ui_field_settings'),
    'title' => 'Group field settings',
    'access arguments' => array('administer group'),
    'description' => 'Configure Group fields in bundles.',
    'file' => 'og_ui.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/group/fields/%/%/%field_ui_menu/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_ui_field_delete_form', 6),
    'load arguments' => array(4, 5, 5, '%map'),
    'title' => 'Delete',
    'access arguments' => array('administer group'),
    'description' => 'Delete a group field from a bundle.',
    'file' => 'og_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu callback; Return the title of a menu item based on the group title.
 */
function og_ui_menu_title_callback($title, $gid) {
  $group = node_load($gid);
  return str_replace('@group', $group->title, $title);
}

/**
 * Implement hook_theme().
 */
function og_ui_theme() {
  return array(
    'og_ui_user_admin_permissions' => array(
      'render element' => 'form',
      'file' => 'og_ui.admin.inc',
    ),
    'og_ui_user_admin_new_role' => array(
      'render element' => 'form',
      'file' => 'og_ui.admin.inc',
    ),
  );
}


/**
 * Implement hook_field_formatter_info().
 */
function og_ui_field_formatter_info() {
  return array(
    'og_group_subscribe' => array(
      'label' => t('Group subscription'),
      'field types' => array('list_boolean'),
    ),
  );
}

/**
 * Implement hook_forms().
 */
function og_ui_forms() {
  $forms['og_ui_user_admin_new_role']['callback'] = 'og_ui_user_admin_role';

  // Form to define the default permissions state for new groups.
  $forms['og_ui_user_admin_global_permissions']['callback'] = 'og_ui_user_admin_permissions';

  return $forms;
}

/**
 * Implement hook_og_permission().
 */
function og_ui_og_permission() {
  $items = array();

  $items['subscribe'] = array(
    'title' => t('Subscribe user to group'),
    'description' => t("Allow user to be a member of a group (approval required)."),
    'roles' => array(OG_ANONYMOUS_ROLE),
    'default role' => array(OG_ANONYMOUS_ROLE),
  );

  $items['subscribe without approval'] = array(
    'title' => t('Subscribe user to group (no approval required).'),
    'description' => t("Allow user to be a member of a group without an approval of the group administrator."),
    'roles' => array(OG_ANONYMOUS_ROLE),
  );

  $items['unsubscribe'] = array(
    'title' => t('Unsubscribe user from group'),
    'description' => t("Allow user to be remove membership from a group."),
    'roles' => array(OG_AUTHENTICATED_ROLE),
    'default role' => array(OG_AUTHENTICATED_ROLE),
  );

  $items['approve and deny subscription'] = array(
    'title' => t('Approve and deny subscription'),
    'description' => t("Allow user to allow or deny another user's subscription request."),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  $items['add user'] = array(
    'title' => t('Add user'),
    'description' => t("Add a new user to the group."),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  return $items;
}


/**
 * Implement hook_og_user_operations().
 */
function og_ui_og_user_operations($form = array(), $form_state = array()) {
  $gid = $form_state['group']->gid;
  $operations = array(
    'unblock' => array(
      'label' => t('Approve membership of the selected users'),
      'callback' => 'og_ui_user_operations_approve',
    ),
    'deny' => array(
      'label' => t('Deny membership from the selected users'),
      'callback' => 'og_ui_user_operations_deny',
    ),
    'block' => array(
      'label' => t('Block membership from the selected users'),
      'callback' => 'og_ui_user_operations_block',
    ),
  );

  if (og_user_access($gid, 'administer group')) {
    $roles = og_user_roles($gid);

    $add_roles = array();
    foreach ($roles as $rid => $name) {
      if (!in_array($name, array(OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE))) {
        $add_roles['add_role-' . $rid] = strip_tags($name);
      }
    }

    $remove_roles = array();
    foreach ($roles as $rid => $name) {
      if (!in_array($name, array(OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE))) {
        $remove_roles['remove_role-' . $rid] = strip_tags($name);
      }
    }

    if ($add_roles) {
      $role_operations = array(
        t('Add a role to the selected users') => array(
          'label' => $add_roles,
        ),
        t('Remove a role from the selected users') => array(
          'label' => $remove_roles,
        ),
      );

      $operations += $role_operations;
    }
  }

  // If the form has been posted, we need to insert the proper data for
  // role editing if necessary.
  if (!empty($form_state['submitted'])) {
    $operation_rid = explode('-', $form_state['values']['operation']);
    $operation = $operation_rid[0];
    if ($operation == 'add_role' || $operation == 'remove_role') {
      $rid = $operation_rid[1];
      if (og_user_access($gid, 'administer group')) {
        $operations[$form_state['values']['operation']] = array(
          'callback' => 'og_ui_user_multiple_role_edit',
          'callback arguments' => array($operation, $rid),
        );
      }
      else {
        watchdog('security', 'Detected malicious attempt to alter protected user fields.', array(), WATCHDOG_WARNING);
        return;
      }
    }
  }

  return $operations;
}


/**
 * Callback function for admin mass approving users.
 */
function og_ui_user_operations_approve($gid, $uids) {
  _group_ui_user_operations_set_state($gid, $uids, OG_STATE_ACTIVE);
}

/**
 * Callback function for admin mass blocking users.
 */
function og_ui_user_operations_block($gid, $uids) {
  _group_ui_user_operations_set_state($gid, $uids, OG_STATE_BLOCKED);
}


/**
 * Set the state of a user in a group.
 *
 * @param $gid
 *   Group ID
 * @param $uids
 *   Uset IDs
 * @param $state
 *   The state to set the user in the group.
 */
function _group_ui_user_operations_set_state($gid, $uids, $state) {
  foreach ($uids as $uid) {
    if ($state !== FALSE) {
      og_save_subscription($gid, $uid, $state);
    }
    else {
      og_delete_subscription($gid, $uid);
    }
  }
}


/**
 * Callback function for admin mass denying users.
 */
function og_ui_user_operations_deny($gid, $uids) {
  foreach ($uids as $uid) {
    og_delete_subscription($gid, $uid);
  }
}


/**
 * Callback function for admin mass adding/ deleting a user role.
 */
function og_ui_user_multiple_role_edit($gid, $uids, $operation, $rid) {
  switch ($operation) {
    case 'add_role':
      foreach ($uids as $uid) {
        og_users_roles_grant($gid, $uid, $rid);

      }
      break;
    case 'remove_role':
      foreach ($uids as $uid) {
        og_users_roles_revoke($gid, $uid, $rid);
      }
      break;
  }
}

/**
 * Implementation of hook_og_ui_get_group_admin()
 */
function og_ui_og_ui_get_group_admin($gid) {
  $items = array();

  $default_access = og_is_group_default_access($gid);

  $items['add_people'] = array(
    'title' => t('Add people'),
    'description' => t('Add group members.'),
    // The final URL will be "group/$entity_type/$etid/admin/people/add-user".
    // @see og_ui_group_admin_overview().
    'href' => 'admin/people/add-user',
  );

  $items['people'] = array(
    'title' => t('People'),
    'description' => t('Manage the group members.'),
    'href' => "admin/people",
  );

  $items['roles'] = array(
    'title' => !$default_access ? t('Roles') : t('Roles (read-only)'),
    'description' => !$default_access ? t('Manage the group roles.') : t('View the group roles.'),
    'href' => "admin/people/roles",
  );
  $items['permissions'] = array(
    'title' => !$default_access ? t('Permissions') : t('Permissions (read-only)'),
    'description' => !$default_access ? t('Manage the group permissions.') : t('View the group permissions.'),
    'href' => "admin/people/permissions",
  );

  return $items;
}

/**
 * Get all the group admin menu items.
 */
function og_ui_get_group_admin($gid) {
  $data = module_invoke_all('og_ui_get_group_admin', $gid);

  // Allow other modules to alter the menu items.
  drupal_alter('og_ui_get_group_admin', $data, $gid);

  return $data;
}
